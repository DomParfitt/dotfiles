#!/usr/bin/env python3

import argparse
from operator import contains
import os
from shutil import which
from subprocess import run
from sys import version_info, exit

PSEUDO_ROLES = ['config', 'terminal']


def parse_args():
    roles = get_available_roles() + PSEUDO_ROLES

    parser = argparse.ArgumentParser(description='Setup stuff')

    parser.add_argument('roles', nargs='*', metavar='roles',
                        help='Roles to run')
    parser.add_argument('-c', '--config-only', action='store_true',
                        help="Only copy config files and don't do any addtional setup")
    parser.add_argument('-l', '--list-roles', action='store_true',
                        help='List the available roles')
    parser.add_argument('-i', '--install-modules', action='store_true',
                        help='Install required Ansible modules')
    parser.add_argument('-t', '--teardown', action='store_true',
                        help='Remove role(s)')

    return parser.parse_args()


def get_available_roles():
    return sorted(os.listdir(os.path.join(os.path.dirname(__file__), 'roles')))


def install_ansible():
    PACKAGE_MANAGERS = {
        'apt':   ['sudo', 'apt', 'install', 'ansible'],
        'brew':  ['brew', 'install', 'ansible'],
        'dnf':   ['sudo', 'dnf', 'install', '-y', 'ansible'],
        'pip':   ['pip', 'install', '--user', '--upgrade', 'ansible'],
        'pip3':  ['pip3', 'install', '--user', '--upgrade', 'ansible']
    }

    available_package_managers = [
        pkg_mgr for pkg_mgr in PACKAGE_MANAGERS if which(pkg_mgr)]

    if not available_package_managers:
        print('No known package manager found. Unable to install Ansible')
        exit(2)

    opts = ', '.join([f'{pkg_mgr} ({idx})' for idx, pkg_mgr in enumerate(
        available_package_managers)])

    selection = input(f'Install Ansible using: {opts} ')

    while not selection.isdigit() or int(selection) >= len(available_package_managers):
        selection = input(f'Install Ansible using: {opts} ')

    install_cmd = PACKAGE_MANAGERS[available_package_managers[int(selection)]]

    run(install_cmd)


def list_roles():
    for role in sorted(get_available_roles() + PSEUDO_ROLES):
        print(role)

    exit(0)


def run_setup(roles, install_modules=False, config_only=False, teardown=False):
    # If ansible is not installed, install it
    if which('ansible') is None:
        print('Ansible is not currently installed.')
        install_ansible()

    # Install additional modules
    if install_modules:
        run(['ansible-galaxy', 'collection',
             'install', '-r', 'requirements.yml', '--force'])

    additional_args = []

    if roles:
        additional_args = ['--tags', ','.join(roles)]

    if config_only:
        additional_args = ['--tags', 'config']
        if roles:
            roles_to_skip = get_available_roles().copy()
            for role in roles:
                if role in roles_to_skip:
                    roles_to_skip.remove(role)
            additional_args.extend(['--skip-tags', ','.join(roles_to_skip)])

    if teardown:
        if not roles:
            proceed = input(
                'No roles provided. This will teardown the entire system. Are you sure? [y/N]: ').lower()
            if not (proceed == 'y' or proceed == 'yes'):
                exit(1)
        additional_args.extend(['--extra-vars', 'should_teardown=true'])

    # Run the playbook
    run(['ansible-playbook', 'main.yml'] + additional_args)


def main():
    # Make sure we're using Python 3
    if version_info.major != 3:
        print(
            f'Python 3 required. Current version is {version_info.major}.{version_info.minor}.{version_info.micro}')
        exit(1)

    args = parse_args()

    if args.list_roles:
        list_roles()
    else:
        run_setup(args.roles, install_modules=args.install_modules,
                  config_only=args.config_only, teardown=args.teardown)


if __name__ == '__main__':
    main()
