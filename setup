#!/usr/bin/env python3

import argparse
import os
from shutil import which
from subprocess import run
from sys import exit

# Pseudo roles are tags that are applied to multiple roles to allow easy setup of a collection
# of related roles
PSEUDO_ROLES = ['config', 'terminal']


def parse_args():
    roles = get_available_roles() + PSEUDO_ROLES

    parser = argparse.ArgumentParser(description='Setup stuff')

    parser.add_argument('roles', nargs='*', metavar='roles',
                        help='Roles to run')
    parser.add_argument('-c', '--config-only', action='store_true',
                        help="Only copy config files and don't do any addtional setup")
    parser.add_argument('-l', '--list-roles', action='store_true',
                        help='List the available roles')
    parser.add_argument('-i', '--install-modules', action='store_true',
                        help='Install required Ansible modules')
    parser.add_argument('-v', action='count', default=1, help='Verbosity')

    return parser.parse_args()


def get_available_roles():
    return sorted(os.listdir(os.path.join(os.path.dirname(__file__), 'roles')))


def install_ansible():
    PACKAGE_MANAGERS = {
        'apt':   ['sudo', 'apt', 'install', 'ansible'],
        'brew':  ['brew', 'install', 'ansible'],
        'dnf':   ['sudo', 'dnf', 'install', '-y', 'ansible'],
        'pip':   ['pip', 'install', '--user', '--upgrade', 'ansible'],
        'pip3':  ['pip3', 'install', '--user', '--upgrade', 'ansible']
    }

    available_package_managers = [
        pkg_mgr for pkg_mgr in PACKAGE_MANAGERS if which(pkg_mgr)]

    if not available_package_managers:
        print('No known package manager found. Unable to install Ansible')
        exit(2)

    opts = ', '.join([f'{pkg_mgr} ({idx})' for idx, pkg_mgr in enumerate(
        available_package_managers)])

    selection = input(f'Install Ansible using: {opts} ')

    while not selection.isdigit() or int(selection) >= len(available_package_managers):
        selection = input(f'Install Ansible using: {opts} ')

    install_cmd = PACKAGE_MANAGERS[available_package_managers[int(selection)]]

    run(install_cmd)


def list_roles():
    for role in sorted(get_available_roles() + PSEUDO_ROLES):
        print(role)

    exit(0)


def run_setup(roles, args):
    # If ansible is not installed, install it
    if which('ansible') is None:
        print('Ansible is not currently installed.')
        install_ansible()

    # Install additional modules
    if args.install_modules:
        run(['ansible-galaxy', 'collection',
             'install', '-r', 'requirements.yml', '--force'])

    additional_args = []
    if args.config_only:
        additional_args = ['--tags', 'config']
        if roles:
            roles_to_skip = get_available_roles().copy()
            for role in roles:
                if role in roles_to_skip:
                    roles_to_skip.remove(role)
            additional_args.extend(['--skip-tags', ','.join(roles_to_skip)])
    elif roles:
        additional_args = ['--tags', ','.join(roles)]

    env = os.environ
    verbosity = [
        ['ANSIBLE_CALLBACK_PRETTY_PRINT_SHOW_SKIPPED'],
        [],
    ]
    for i in range(0, min(args.v - 1, len(verbosity))):
        for pair in verbosity[i]:
            env[pair] = 'True'
        pass

    # Run the playbook
    run(['ansible-playbook', 'main.yml'] + additional_args, env=env)


def main():
    args = parse_args()

    if args.list_roles:
        list_roles()
    else:
        run_setup(args.roles, args)


if __name__ == '__main__':
    main()
